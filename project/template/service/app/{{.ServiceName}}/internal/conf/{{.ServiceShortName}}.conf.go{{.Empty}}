package conf

import (
	"{{.BusinessPackageName}}/config"
	"{{.BusinessPackageName}}/config/def"

    "{{.PackageName}}/app/{{.ServiceName}}/internal/inject"
)

// {{.StructServiceName}}Config 在全局基础配置的前提下增加了自定义配置信息 Hello,
// 并且在此之上，通过 `conf_service` 增加了对基础配置自定义的能力
type {{.StructServiceName}}Config struct {
	*def.Configuration `conf_service:"{{.ServiceName}}"`
	// Server            *def.Server        `conf_path:"/registry/{{.ServiceName}}/{{.Version}}/config"` // TODO: 配置完配置中心后移除注释, 实现自定义服务器监听配置
	DemoExchange      def.ExchangeConfig `conf_path:"/message/exchange/ping"`
	DemoQueue         def.QueueConfig    `conf_path:"/message/queue/ping"`
	DemoConsumer      def.ConsumeConfig  `conf_path:"/message/consumer/ping"`
}

// New{{.StructServiceName}}Config 提供新的自定义配置信息
func New{{.StructServiceName}}Config(repo config.ConfigureWatcherRepo) (*{{.StructServiceName}}Config, error) {
	{{.ServiceShortName}} := &{{.StructServiceName}}Config{
	    Configuration: &def.Configuration{
	        Server: &def.Server{},
	    },
	    // Server: &def.Server{}, // TODO: 配置完配置中心后移除注释, 实现自定义服务器监听配置
	}

	err := repo.LoadAndStart({{.ServiceShortName}})
	return {{.ServiceShortName}}, err
}

// NewConfigReplacer 允许应用使用自定义配置信息覆盖默认的全局配置
func NewConfigReplacer({{.ServiceShortName}} *{{.StructServiceName}}Config) *def.Configuration {
    {{.ServiceShortName}}.Configuration.Server = {{.ServiceShortName}}.Server
	return {{.ServiceShortName}}.Configuration
}

func init() {
	inject.Injection().Inject(New{{.StructServiceName}}Config)
	inject.Injection().Inject(NewConfigReplacer)
}
